{"version":3,"sources":["axiosInstance.js","requests.js","InfoBox.js","util.js","Map.js","Table.js","Graph.js","Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","requests","worldwide","countries","historicalData","InfoBox","title","cases","active","isRed","total","props","Card","onClick","className","CardContent","Typography","color","sortData","data","sortedData","sort","a","b","graphOptions","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","casesTypeColors","hex","multiplier","recovered","deaths","showCirclesOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","prettyPrintStat","num","Map","zoom","key","console","log","TileLayer","url","attribution","Table","Graph","useState","setdata","useEffect","axiosInstance","get","then","chartData","lastDataPoint","date","newDataPoint","x","y","push","buildChartData","length","datasets","backgroundColor","borderColor","Navbar","setcountries","setcountry","setcountryInfo","tableData","settableData","lng","mapCenter","setmapCenter","mapZoom","setmapZoom","mapCountries","setmapCountries","setcasesType","name","iso2","getCountries","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","random","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c89e3b7.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://disease.sh/v3/covid-19'\r\n})\r\n\r\n\r\nexport default instance;","const requests = {\r\n    worldwide: '/all',\r\n    countries : '/countries',\r\n    historicalData: '/historical/all?lastdays=120'\r\n}\r\n\r\nexport default requests;","import React from 'react'\r\nimport './InfoBox.css';\r\nimport {Card, CardContent, Typography} from '@material-ui/core';\r\n\r\nfunction InfoBox({ title, cases, active, isRed, total, ...props }) {\r\n    return (\r\n        <Card onClick={props.onClick} className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}`}>\r\n            <CardContent>\r\n                <Typography className=\"infoBox_title\" color=\"textSecondary\">{title}</Typography>\r\n                <h2 className={`infoBox_cases ${!isRed && 'infoBox__cases--green'}`}>{cases}</h2>\r\n                <Typography className=\"infoBox_total\" color=\"textSecondary\">{total} Total</Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","// helper fuctions\r\nimport numeral from \"numeral\";\r\nimport {Circle, Popup} from 'react-leaflet';\r\nimport React from 'react';\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n    sortedData.sort((a, b) => {\r\n        if (a.cases > b.cases) return -1;\r\n        else return 1\r\n    })\r\n\r\n    return sortedData;\r\n}\r\n\r\nexport const buildChartData = (data, casesType = 'cases') => {\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data[casesType]) {\r\n        if (lastDataPoint) {\r\n            const newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint\r\n            }\r\n            chartData.push(newDataPoint)\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData\r\n}\r\n\r\nexport const graphOptions =  {\r\n    options : {\r\n        legend: {\r\n          display: false,\r\n        },\r\n        elements: {\r\n          point: {\r\n            radius: 0,\r\n          },\r\n        },\r\n        maintainAspectRatio: false,\r\n        tooltips: {\r\n          mode: \"index\",\r\n          intersect: false,\r\n          callbacks: {\r\n            label: function (tooltipItem, data) {\r\n              return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n          },\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              type: \"time\",\r\n              time: {\r\n                format: \"MM/DD/YY\",\r\n                tooltipFormat: \"ll\",\r\n              },\r\n            },\r\n          ],\r\n          yAxes: [\r\n            {\r\n              gridLines: {\r\n                display: false,\r\n              },\r\n              ticks: {\r\n                // Include a dollar sign in the ticks\r\n                callback: function (value, index, values) {\r\n                  return numeral(value).format(\"0a\");\r\n                },\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      }\r\n}\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\n// draw circles on map\r\nexport const showCirclesOnMap = (data,casesType='cases') => (\r\n  data.map(country => (\r\n    <Circle\r\n    center={[country.countryInfo.lat, country.countryInfo.long]}\r\n    color={casesTypeColors[casesType].hex}\r\n    fillColor={casesTypeColors[casesType].hex}\r\n    fillOpacity={0.4}\r\n    radius={\r\n      Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n    }\r\n  >\r\n    <Popup>\r\n      <div className=\"info-container\">\r\n        <div\r\n          className=\"info-flag\"\r\n          style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n        ></div>\r\n        <div className=\"info-name\">{country.country}</div>\r\n        <div className=\"info-confirmed\">\r\n          Cases: {numeral(country.cases).format(\"0,0\")}\r\n        </div>\r\n        <div className=\"info-recovered\">\r\n          Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n        </div>\r\n        <div className=\"info-deaths\">\r\n          Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n        </div>\r\n      </div>\r\n    </Popup>\r\n  </Circle>\r\n  ))\r\n)\r\n\r\n\r\nexport const prettyPrintStat = (num) => {\r\n  return num ? `+${numeral(num).format('0.0a')}` : '+0';\r\n}","import React from 'react'\r\nimport './Map.css'\r\nimport { MapContainer as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport {showCirclesOnMap} from './util'\r\n\r\nfunction Map({countries, casesType, center, zoom, key}) {\r\n    return (\r\n        <div className=\"map\">\r\n            {console.log('center >>', center, ' zoom>>', zoom)}\r\n            <LeafletMap key={key} center={center} zoom={zoom}>\r\n                <TileLayer \r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" \r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'/>\r\n                {showCirclesOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport './Table.css'\r\nimport numeral from 'numeral'\r\n\r\nfunction Table({ countries, casesType = 'cases' }) {\r\n    // const [caseType, setcaseType] = useState(casesType)\r\n    // useEffect(() => {\r\n    //    setcaseType(casesType)\r\n    // }, [casesType])\r\n    return (\r\n        <div className=\"table\">\r\n            {console.log('table data??', countries)}\r\n            {\r\n                countries.map(country => (\r\n                    <tr>\r\n                        <td>{country.country}</td>\r\n                        <td>\r\n                            <strong>\r\n                                {\r\n                                numeral(country[casesType]).format('0,0')\r\n                                }\r\n                            </strong>\r\n                        </td>\r\n                    </tr>\r\n\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React,{useState, useEffect} from 'react'\r\nimport {Line} from 'react-chartjs-2';\r\nimport \"./Graph.css\";\r\nimport axiosInstance from './axiosInstance';\r\nimport requests from './requests';\r\nimport { buildChartData, graphOptions } from './util';\r\n\r\nfunction Graph({casesType = 'cases', ...props}) {\r\n    const [data, setdata] = useState({});\r\n    useEffect(() => {\r\n        axiosInstance.get(requests.historicalData)\r\n            .then(data => {\r\n                console.log(data.data)\r\n                const chartData = buildChartData(data.data, casesType)\r\n                setdata(chartData)\r\n            })\r\n    }, [casesType])\r\n\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length && (\r\n                <Line data={{\r\n                    datasets: [\r\n                        {   label: 'My First dataset',\r\n                            backgroundColor: (casesType==='cases' || casesType==='deaths') ? \"rgba(204, 16, 52, 0.5)\" : \"lightgreen\",\r\n                            borderColor: (casesType==='cases' || casesType==='deaths') ? \"#CC1034\" : \"#34d656\",\r\n                            data: data,\r\n                        }\r\n                    ]\r\n                }} options={graphOptions.options} />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Graph\r\n","import React, { useState, useEffect } from 'react';\r\nimport { FormControl, Select, MenuItem, CardContent, Card } from '@material-ui/core'\r\nimport axiosInstance from './axiosInstance';\r\nimport requests from './requests';\r\nimport InfoBox from './InfoBox';\r\nimport './Navbar.css';\r\nimport Map from './Map';\r\nimport Table from './Table';\r\nimport Graph from './Graph';\r\nimport { sortData, prettyPrintStat } from './util';\r\nfunction Navbar() {\r\n    const [countries, setcountries] = useState([]);\r\n    const [country, setcountry] = useState('worldwide');\r\n    const [countryInfo, setcountryInfo] = useState({});\r\n    const [tableData, settableData] = useState([])\r\n    const [mapCenter, setmapCenter] = useState({ lat: 34.80746, lng: -40.4796 })\r\n    const [mapZoom, setmapZoom] = useState(3);\r\n    const [mapCountries, setmapCountries] = useState([]);\r\n    const [casesType, setcasesType] = useState('cases');\r\n\r\n    // getting list of countries\r\n    useEffect(() => {\r\n        const getCountries = async () => {\r\n            await axiosInstance.get(requests.countries)\r\n                .then(data => {\r\n                    const countries = data.data.map(country => (\r\n                        {\r\n                            name: country.country,\r\n                            value: country.countryInfo.iso2\r\n                        }\r\n                    ))\r\n                    const sortedData = sortData(data.data)\r\n                    settableData(sortedData)\r\n                    setmapCountries(data.data);\r\n                    setcountries(countries);\r\n                })\r\n        }\r\n        getCountries();\r\n    }, [])\r\n\r\n    // initial api call for worldwide stats\r\n    useEffect(() => {\r\n        axiosInstance.get(requests.worldwide)\r\n            .then(data => {\r\n                setcountryInfo(data.data)\r\n            })\r\n    }, [])\r\n\r\n    // on dropdown select getting stats for each select\r\n    const onCountryChange = async (e) => {\r\n        setmapZoom(3)\r\n        const countryCode = e.target.value\r\n\r\n        const url = countryCode === 'worldwide' ? requests.worldwide : requests.countries + `/${countryCode}`;\r\n        await axiosInstance.get(url)\r\n            .then(data => {\r\n                // console.log('lat lng data >>',[data.data.countryInfo.lat, data.data.countryInfo.long])\r\n                setcountry(countryCode);\r\n                setcountryInfo(data.data);\r\n                if (countryCode === 'worldwide') {\r\n                    setmapCenter([40.416775, -3.703790])\r\n                } else {\r\n                    setmapCenter([data.data.countryInfo.lat, data.data.countryInfo.long])\r\n                }\r\n                setmapZoom(4)\r\n            })\r\n    }\r\n    return (\r\n        <div className=\"mainContainer\">\r\n            <div className=\"app_left\">\r\n                <div className=\"app_header\">\r\n                    <h1>COVID-19 TRACKER</h1>\r\n                    <FormControl className=\"app_dropdown\">\r\n                        <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\r\n                            <MenuItem value=\"worldwide\">Worldwide</MenuItem>\r\n                            {\r\n                                countries.map((country) => {\r\n                                    return <MenuItem value={country.value}>{country.name}</MenuItem>\r\n                                })\r\n                            }\r\n                        </Select>\r\n                    </FormControl>\r\n                </div>\r\n                <div className=\"app_stats\">\r\n                    <InfoBox \r\n                        isRed\r\n                        active={casesType==='cases'}\r\n                        onClick={e => setcasesType('cases')} \r\n                        cases={prettyPrintStat(countryInfo.todayCases)} \r\n                        total={prettyPrintStat(countryInfo.cases)} title=\"Coronavirus Cases\" />\r\n                    <InfoBox \r\n                        active={casesType==='recovered'}\r\n                        onClick={e => setcasesType('recovered')} \r\n                        cases={prettyPrintStat(countryInfo.todayRecovered)} \r\n                        total={prettyPrintStat(countryInfo.recovered)} title=\"Recovered\" />\r\n                    <InfoBox \r\n                        isRed\r\n                        active={casesType==='deaths'}\r\n                        onClick={e => setcasesType('deaths')} \r\n                        cases={prettyPrintStat(countryInfo.todayDeaths)} \r\n                        total={prettyPrintStat(countryInfo.deaths)} title=\"Deaths\" />\r\n                </div>\r\n                <Map \r\n                    countries={mapCountries} \r\n                    center={mapCenter} zoom={mapZoom} \r\n                    key={Math.random()}\r\n                    casesType={casesType}\r\n                ></Map>\r\n            </div>\r\n            <div className=\"app_right\">\r\n                <Card className=\"table_card\">\r\n                    <CardContent>\r\n                        <h3>Live {casesType} stats by country</h3>\r\n                        <Table countries={tableData} casesType={casesType} />\r\n                    </CardContent>\r\n                </Card>\r\n                <Card className=\"graph_card\">\r\n                    <CardContent>\r\n                        <h3 className=\"graph_heading\">Latest {casesType} trend</h3>\r\n                        <Graph className=\"app_graph\" casesType={casesType} />\r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import './App.css';\nimport Navbar from './Navbar';\nimport 'leaflet/dist/leaflet.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}